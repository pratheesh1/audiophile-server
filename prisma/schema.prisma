datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../src/public/docs/db"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "./models"
}

model BlackListedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@index([token], name: "token")
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String    @unique @map("country_name")
  code      String    @unique @map("country_code") @db.VarChar(2)
  Address   Address[]
  createdAt DateTime  @default(now()) @map("created_at")

  @@index([code], name: "country_code")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  Product     Product[]
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([name], name: "name")
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  price           Float
  Brand           Brand             @relation(fields: [brandId], references: [id])
  brandId         Int
  quantity        Int
  sku             String
  Category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      Int               @map("category_id")
  User            User              @relation(fields: [userId], references: [id])
  userId          Int               @map("user_id")
  ProductVariant  ProductVariant[]
  ProductProperty ProductProperty[]
  ProductImage    ProductImage[]
  CartItem        CartItem[]
  OrderItem       OrderItem[]
  Voucher         Voucher[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")

  @@unique([sku, userId], name: "productOwner", map: "product_sku_user_id")
  @@index([name], name: "name")
}

model ProductVariant {
  id                     Int                      @id @default(autoincrement())
  name                   String
  description            String?
  price                  Float
  quantity               Int
  sku                    String
  Product                Product                  @relation(fields: [productId], references: [id])
  productId              Int                      @map("product_id")
  ProductVariantProperty ProductVariantProperty[]
  ProductVariantImage    ProductVariantImage[]
  Voucher                Voucher[]
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @default(now()) @map("updated_at")
  CartItem               CartItem[]
  OrderItem              OrderItem[]

  @@unique([sku, productId], name: "uniqueProductVariant", map: "product_variant_sku_product_id")
  @@index([name], name: "name")
}

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  logoUri     String?   @map("logo_uri")
  Product     Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  @@index([name], name: "name")
}

enum ProductPropertyType {
  TEXT
  NUMBER
  BOOLEAN
}

model ProductProperty {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  Product     Product             @relation(fields: [productId], references: [id])
  productId   Int                 @map("product_id")
  type        ProductPropertyType @default(TEXT) @map("type")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")

  @@unique([name, productId], name: "uniqueProductProperty", map: "product_property_name_product_id")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([url, productId], name: "uniqueProductImage", map: "product_image_url_product_id")
}

model ProductVariantProperty {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  Product     ProductVariant      @relation(fields: [productId], references: [id])
  productId   Int                 @map("product_id")
  type        ProductPropertyType @default(TEXT) @map("type")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")

  @@unique([name, productId], name: "uniqueProductVariantProperty", map: "product_variant_property_name_product_id")
}

model ProductVariantImage {
  id        Int            @id @default(autoincrement())
  url       String
  Product   ProductVariant @relation(fields: [productId], references: [id])
  productId Int            @map("product_id")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @map("updated_at")

  @@unique([url, productId], name: "uniqueProductVariantImage", map: "product_variant_image_url_product_id")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String
  firstName           String                @map("first_name")
  middleName          String?               @map("middle_name")
  lastName            String                @map("last_name")
  imageUri            String?               @map("image_uri")
  phone               String?               @map("phone")
  role                UserRole              @default(USER)
  isVerified          Boolean               @default(false) @map("is_verified")
  EmailValidatonToken EmailValidatonToken[]
  Address             Address[]
  Product             Product[]
  Cart                Cart[]
  Order               Order[]
  UserOrder           UserOrder[]
  Voucher             Voucher[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @map("updated_at")

  @@index([email], name: "email")
  @@index([firstName], name: "first_name")
  @@index([lastName], name: "last_name")
}

model EmailValidatonToken {
  id        Int      @id @default(autoincrement())
  token     String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([token, userId], name: "uniqueEmailValidatonToken", map: "email_validaton_token_token_user_id")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  street    String
  city      String
  state     String
  country   Country  @relation(fields: [countryId], references: [id])
  countryId Int      @map("country_id")
  zip       String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  Order     Order[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([city], name: "city")
  @@index([countryId], name: "country_id")
}

model Cart {
  id        Int        @id @default(autoincrement())
  User      User       @relation(fields: [userId], references: [id])
  userId    Int        @map("user_id")
  CartItem  CartItem[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @map("updated_at")

  @@index([userId], name: "user_id")
}

model CartItem {
  id               Int             @id @default(autoincrement())
  quantity         Int
  originalPrice    Float           @map("original_price")
  Cart             Cart            @relation(fields: [cartId], references: [id])
  cartId           Int             @map("cart_id")
  Product          Product         @relation(fields: [productId], references: [id])
  productId        Int             @map("product_id")
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?            @map("product_variant_id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")

  @@unique([cartId, productId, productVariantId], name: "uniqueCartItem", map: "cart_item_cart_id_product_id_product_variant_id")
  @@index([productId], name: "product_id")
  @@index([productVariantId], name: "product_variant_id")
}

enum OrderStatus {
  PENDING_PAYMENT
  PAYMENT_FAILED
  PAYMENT_SUCCESS
  PROCESSING
  PENDING_SHIPMENT
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id          Int         @id @default(autoincrement())
  status      String
  User        User        @relation(fields: [userId], references: [id])
  userId      Int         @map("user_id")
  Address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int         @map("address_id")
  note        String?
  paymentId   String?     @map("payment_id")
  orderStatus OrderStatus @default(PENDING_PAYMENT) @map("order_status")
  UserOrder   UserOrder[]
  OrderItem   OrderItem[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")

  @@index([userId], name: "user_id")
}

model UserOrder {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      @map("order_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([userId, orderId], name: "uniqueUserOrder", map: "user_order_user_id_order_id")
}

model OrderItem {
  id               Int             @id @default(autoincrement())
  quantity         Int
  salePrice        Float           @map("sale_price")
  Order            Order           @relation(fields: [orderId], references: [id])
  orderId          Int             @map("order_id")
  Product          Product         @relation(fields: [productId], references: [id])
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?            @map("product_variant_id")
  productId        Int             @map("product_id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")

  @@unique([orderId, productId, productVariantId], name: "uniqueOrderItem", map: "order_item_order_id_product_id_product_variant_id")
  @@index([productId], name: "product_id")
  @@index([productVariantId], name: "product_variant_id")
}

model Voucher {
  id               Int             @id @default(autoincrement())
  code             String
  type             String
  value            Float
  User             User            @relation(fields: [userId], references: [id])
  Product          Product         @relation(fields: [productId], references: [id])
  productId        Int             @map("product_id")
  ProduvtVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?            @map("product_variant_id")
  userId           Int             @map("user_id")
  percent          Float?          @default(0)
  minAmount        Float           @map("min_amount")
  maxAmount        Float           @map("max_amount")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")

  @@unique([code, userId, productId, productVariantId], name: "uniqueVoucher", map: "voucher_code_user_id_product_id_product_variant_id")
  @@index([productId], name: "product_id")
  @@index([productVariantId], name: "product_variant_id")
}
