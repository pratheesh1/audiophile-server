datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../src/public/docs/db"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "./generated_models"
}

model BlackListedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String    @unique @map("country_name")
  code      String    @unique @map("country_code") @db.VarChar(2)
  Address   Address[]
  createdAt DateTime  @default(now()) @map("created_at")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  Product     Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  price           Float
  brand           String
  quantity        Int
  Category        Category          @relation(fields: [categoryId], references: [id])
  categoryId      Int               @map("category_id")
  ProductVariant  ProductVariant[]
  ProductProperty ProductProperty[]
  ProductImage    ProductImage[]
  User            User              @relation(fields: [userId], references: [id])
  userId          Int               @map("user_id")
  sku             String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")

  @@unique([sku, userId], name: "productOwner", map: "product_sku_user_id")
}

model ProductVariant {
  id                     Int                      @id @default(autoincrement())
  name                   String
  description            String?
  price                  Float
  quantity               Int
  Product                Product                  @relation(fields: [productId], references: [id])
  productId              Int                      @map("product_id")
  ProductVariantProperty ProductVariantProperty[]
  ProductVariantImage    ProductVariantImage[]
  sku                    String
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @default(now()) @map("updated_at")

  @@unique([sku, productId], name: "uniqueProductVariant", map: "product_variant_sku_product_id")
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  logoUri     String?  @map("logo_uri")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
}

enum ProductPropertyType {
  TEXT
  NUMBER
  BOOLEAN
}

model ProductProperty {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  Product     Product             @relation(fields: [productId], references: [id])
  productId   Int                 @map("product_id")
  type        ProductPropertyType @default(TEXT) @map("type")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")

  @@unique([name, productId], name: "uniqueProductProperty", map: "product_property_name_product_id")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([url, productId], name: "uniqueProductImage", map: "product_image_url_product_id")
}

model ProductVariantProperty {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  Product     ProductVariant      @relation(fields: [productId], references: [id])
  productId   Int                 @map("product_id")
  type        ProductPropertyType @default(TEXT) @map("type")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")

  @@unique([name, productId], name: "uniqueProductVariantProperty", map: "product_variant_property_name_product_id")
}

model ProductVariantImage {
  id        Int            @id @default(autoincrement())
  url       String
  Product   ProductVariant @relation(fields: [productId], references: [id])
  productId Int            @map("product_id")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @map("updated_at")

  @@unique([url, productId], name: "uniqueProductVariantImage", map: "product_variant_image_url_product_id")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String
  firstName           String                @map("first_name")
  middleName          String?               @map("middle_name")
  lastName            String                @map("last_name")
  imageUri            String?               @map("image_uri")
  phone               String?               @map("phone")
  role                UserRole              @default(USER)
  isVerified          Boolean               @default(false) @map("is_verified")
  EmailValidatonToken EmailValidatonToken[]
  Address             Address[]
  Product             Product[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @map("updated_at")
}

model EmailValidatonToken {
  id        Int      @id @default(autoincrement())
  token     String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([token, userId], name: "uniqueEmailValidatonToken", map: "email_validaton_token_token_user_id")
}

model Address {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  city      String
  state     String
  country   Country  @relation(fields: [countryId], references: [id])
  countryId Int      @map("country_id")
  zip       String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}
